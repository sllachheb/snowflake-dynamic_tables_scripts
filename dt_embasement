create or replace dynamic table DATATABLES_PROD.PATRIMOINE_CLASSE2.DT_EMBASEMENT(
	COMPTE_ID_UTILISATEUR,
	COMPTE_CODE_CLIENT,
	NO_PARUTION,
	MOIS_ANNEE_PARUTION,
	DATE_PARUTION,
	DATE_PARUTION_PRECEDENTE,
	DATE_DEBUT_SEMAINE,
	DATE_FIN_SEMAINE,
	COMPTE_DATE_CREATION,
	DATE_ACTIVATION_COMPTE,
	FLG_COMPTE_ACTIVE,
	FLG_COMPTE,
	FLG_NOUVEAU_COMPTE,
	FLG_ABONNE,
	FLG_NOUVEL_ABONNE,
	FLG_ABONNE_FAMILLE,
	FLG_NOUVEL_ABONNE_FAMILLE,
	FLG_COMPTE_PRINCIPAL_ABONNE_FAMILLE,
	FLG_COMPTE_ENFANT_ABONNE_FAMILLE,
	NBR_COMPTES_INVITES_ABONNEMENT_FAMILLE,
	COMPTE_ID_UTILISATEUR_PARENT,
	FLG_OPTIN_NL,
	FLG_NOUVEL_OPTIN_NL,
	FLG_OPTIN_MARQUE,
	FLG_NOUVEL_OPTIN_MARQUE,
	FLG_PORTEUR_APP,
	FLG_NOUVEAU_PORTEUR_APP,
	FLG_UTILISATEUR_ACTIF_GLOBAL,
	FLG_UTILISATEUR_ACTIF_SITE_MOBILE,
	FLG_UTILISATEUR_ACTIF_APP,
	FLG_UTILISATEUR_ACTIF_DESKTOP,
	SEG_ABONNE,
	SOUS_SEG_ABONNE,
	TYPE_ABO_SIMPLIFIE
) lag = '3 days' refresh_mode = AUTO initialize = ON_CREATE warehouse = TRANSFORMATION_XS_WH
 as

WITH CTE_UTILISATEUR AS ( -- >> DONNÉES PUREMENT BOC

--CREATE OR REPLACE TEMPORARY TABLE CTE_UTILISATEUR AS /*RECETTE*/

SELECT 
    COMPTE_ID_UTILISATEUR,
    COMPTE_CODE_CLIENT,
    COMPTE_DATE_ACTIVATION,
    COMPTE_DATE_CREATION,
    CASE WHEN COMPTE_ORIGINE ILIKE '%swg%' THEN 1 ELSE 0 END                        AS FLG_SWG,
    NO_PARUTION,
    CAL.DATE_PARUTION,
    MAX(CASE WHEN US.SERVICE_CODE = 'abonnelpt' THEN SERVICE_DATE_DEBUT END)        AS DATE_DEBUT_ABONNEMENT,
    MAX(CASE WHEN US.SERVICE_CODE = 'abonnefamille' THEN SERVICE_DATE_DEBUT END)    AS DATE_DEBUT_ABONNEMENT_FAMILLE,
    MAX(CASE WHEN US.SERVICE_CODE = 'abonnefamille' THEN SERVICE_NOMBRE END)        AS NBR_COMPTES_INVITES_ABONNEMENT_FAMILLE,
    MIN(CASE WHEN US.SERVICE_CODE ILIKE 'nl%' THEN SERVICE_DATE_DEBUT END)          AS DATE_DEBUT_OPTIN_NL,
    MIN(CASE WHEN US.SERVICE_CODE = 'offrespoint' THEN SERVICE_DATE_DEBUT END)      AS DATE_DEBUT_OPTIN_MARQUE,
    COUNT_IF(US.SERVICE_CODE ILIKE 'nl%')                                           AS NB_NL_OPTIN,
    COUNT_IF(US.SERVICE_CODE = 'abonnelpt')                                         AS FLG_ABONNE
    
FROM (

    SELECT 
        COMPTE_ID_UTILISATEUR,
        COMPTE_CODE_CLIENT,
        COMPTE_DATE_ACTIVATION,
        COMPTE_DATE_CREATION,
        COMPTE_ORIGINE,
        SERVICE_CODE,
        SERVICE_DATE_DEBUT,
        SERVICE_DATE_FIN,
        SERVICE_GELE,
        SERVICE_STATUT,
        SERVICE_NOMBRE
        
    FROM RAWDATA_PROD.BOC.DT_UTILISATEUR_SERVICES US
    WHERE
        (US.SERVICE_CODE ILIKE ANY ('nl%','offrespoint','abonnelpt','abonnefamille') OR US.SERVICE_CODE IS NULL) -- Seulement les NLs, opt-ins marque et abonnements
        AND US.COMPTE_ETAT IN ('AUTHENTIFIE','COMPTE')
       -- AND US.COMPTE_ID_UTILISATEUR = 4831716 /*RECETTE*/
    ) US 
CROSS JOIN DATATABLES_PROD.PATRIMOINE_CLASSE1.V_CALENDRIER_PARUTIONS CAL
WHERE
    (CASE WHEN US.SERVICE_DATE_DEBUT IS NOT NULL THEN US.SERVICE_DATE_DEBUT <= CAL.DATE_DEBUT_SEMAINE ELSE US.COMPTE_DATE_CREATION <= CAL.DATE_DEBUT_SEMAINE END)
    AND US.SERVICE_DATE_FIN > CAL.DATE_DEBUT_SEMAINE
    AND CAL.FLG_HORS_SERIE = 0
   -- AND CAL.NO_PARUTION = 2717
GROUP BY ALL
),

CTE_UTILISATEUR_360 AS ( -- >> CROISEMENT BOC x ABOWEB

--CREATE OR REPLACE TEMPORARY TABLE CTE_UTILISATEUR_360 AS /*RECETTE*/
SELECT 
  * 
FROM 
  (
    SELECT 
      U.COMPTE_ID_UTILISATEUR, 
      COALESCE(U.COMPTE_CODE_CLIENT, T.CODE_CLIENT)                             AS COMPTE_CODE_CLIENT, 
      COALESCE(U.NO_PARUTION, T.NO_PARUTION)                                    AS NO_PARUTION, 
      U.COMPTE_DATE_ACTIVATION, 
      U.COMPTE_DATE_CREATION, 
      COALESCE(U.DATE_PARUTION, T.DATE_PARUTION)                                AS DATE_PARUTION, 
      U.DATE_DEBUT_ABONNEMENT, 
      U.DATE_DEBUT_ABONNEMENT_FAMILLE, 
      U.NBR_COMPTES_INVITES_ABONNEMENT_FAMILLE, 
      U.DATE_DEBUT_OPTIN_NL, 
      U.DATE_DEBUT_OPTIN_MARQUE, 
      
      CASE WHEN T.CODE_CLIENT IS NOT NULL THEN 1 
           WHEN U.FLG_ABONNE IS NULL AND T.CODE_CLIENT IS NOT NULL THEN 1 
           WHEN U.FLG_ABONNE IS NULL AND T.CODE_CLIENT IS NULL THEN 0 
           ELSE U.FLG_ABONNE END                                                AS FLG_ABONNE, 
      
      CASE WHEN U.FLG_SWG IS NULL THEN 0 
           WHEN U.FLG_SWG = 1 AND FLG_ABONNE = 0 THEN 0 
           WHEN U.FLG_SWG = 1 AND T.CODE_CLIENT IS NOT NULL THEN 0 
           ELSE U.FLG_SWG END                                                   AS FLG_ABONNE_SWG, 
           
      U.NB_NL_OPTIN, 
      CASE WHEN T.TYPE_ABO_SIMPLIFIE IS NOT NULL THEN T.TYPE_ABO_SIMPLIFIE 
           WHEN U.FLG_ABONNE = 1 THEN 'NUM'
           ELSE 'N/A' END AS TYPE_ABO_SIMPLIFIE,

      CASE WHEN CATEGORIE = 'ACQUISITION' THEN 1 ELSE 0 END                     AS FLG_ACQUISITION_ABOWEB 
      
    FROM CTE_UTILISATEUR U 
    FULL JOIN (SELECT * FROM DATATABLES_PROD.PATRIMOINE_CLASSE2.DT_TIRAGE360 WHERE FLG_SWG=0 and FLG_INAPP = 0) T ON TRIM(U.COMPTE_CODE_CLIENT) = TRIM(T.CODE_CLIENT) 
      AND TRIM(U.NO_PARUTION) = TRIM(T.NO_PARUTION) 
      --AND U.COMPTE_ID_UTILISATEUR = 5130632 /*RECETTE*/
      --AND T.CODE_CLIENT IS NULL /*RECETTE*/
  ) T 
WHERE 
  T.DATE_PARUTION >= CURRENT_DATE - 800 -- >> Filtre sur les 800 derniers jours pour limiter la fenêtre d'analyse
  AND (COMPTE_CODE_CLIENT IS NULL OR COMPTE_CODE_CLIENT IN (SELECT CODE_CLIENT FROM DATATABLES_PROD.PATRIMOINE_CLASSE2.DT_TIRAGE360 GROUP BY ALL)) -- >> Exclusion des clients non individuels
  --AND COMPTE_CODE_CLIENT IS NULL AND COMPTE_ID_UTILISATEUR IS NULL
  --AND T.NO_PARUTION = 2717
  
--  AND COMPTE_CODE_CLIENT = $CODE_CLIENT -- TEST !

  )
  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- >> EMBASEMENT DEBUT << --
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT
    T1.COMPTE_ID_UTILISATEUR,
    T1.COMPTE_CODE_CLIENT,
    T1.NO_PARUTION,
    T1.MOIS_ANNEE_PARUTION,
    T1.DATE_PARUTION,
    T1.DATE_PARUTION_PRECEDENTE,
    T1.DATE_DEBUT_SEMAINE,
    T1.DATE_FIN_SEMAINE,
    T1.COMPTE_DATE_CREATION,
    T1.COMPTE_DATE_ACTIVATION                                                                                                                   AS DATE_ACTIVATION_COMPTE,
    CASE WHEN COMPTE_DATE_ACTIVATION IS NULL THEN 0 ELSE 1 END                                                                                  AS FLG_COMPTE_ACTIVE,
    CASE WHEN T1.COMPTE_DATE_CREATION <= T1.DATE_DEBUT_SEMAINE THEN 1 ELSE 0 END                                                                     AS FLG_COMPTE,
    CASE WHEN T1.COMPTE_DATE_CREATION <= T1.DATE_DEBUT_SEMAINE AND T1.COMPTE_DATE_CREATION > DATE_DEBUT_SEMAINE_PRECEDENTE THEN 1 ELSE 0 END              AS FLG_NOUVEAU_COMPTE,
    
    T1.FLG_ABONNE,
    CASE WHEN (T1.DATE_DEBUT_ABONNEMENT IS NOT NULL AND T1.DATE_DEBUT_ABONNEMENT > DATE_DEBUT_SEMAINE_PRECEDENTE)        
         OR (FLG_ACQUISITION_ABOWEB = 1 AND T1.DATE_DEBUT_SEMAINE > DATE_DEBUT_SEMAINE_PRECEDENTE) THEN 1 ELSE 0 END                                      AS FLG_NOUVEL_ABONNE,
                
    CASE WHEN T1.DATE_DEBUT_ABONNEMENT_FAMILLE IS NOT NULL THEN 1 ELSE 0 END                                                                    AS FLG_ABONNE_FAMILLE,
    CASE WHEN T1.DATE_DEBUT_ABONNEMENT_FAMILLE IS NOT NULL AND T1.DATE_DEBUT_ABONNEMENT_FAMILLE > DATE_DEBUT_SEMAINE_PRECEDENTE THEN 1 ELSE 0 END    AS FLG_NOUVEL_ABONNE_FAMILLE,
    CASE WHEN FLG_ABONNE_FAMILLE = 1 THEN 1 ELSE 0 END                                                                                          AS FLG_COMPTE_PRINCIPAL_ABONNE_FAMILLE,
    T1.FLG_COMPTE_ENFANT_ABONNE_FAMILLE,
    T1.NBR_COMPTES_INVITES_ABONNEMENT_FAMILLE,
    T1.COMPTE_ID_UTILISATEUR_PARENT,
    
-- >> Opt-ins <<--    
    T1.FLG_OPTIN_NL,
    CASE WHEN T1.DATE_DEBUT_OPTIN_NL IS NOT NULL AND T1.DATE_DEBUT_OPTIN_NL > DATE_DEBUT_SEMAINE_PRECEDENTE THEN 1 ELSE 0 END                        AS FLG_NOUVEL_OPTIN_NL,
    T1.FLG_OPTIN_MARQUE,
    CASE WHEN T1.DATE_DEBUT_OPTIN_MARQUE IS NOT NULL AND T1.DATE_DEBUT_OPTIN_MARQUE > DATE_DEBUT_SEMAINE_PRECEDENTE THEN 1 ELSE 0 END                AS FLG_NOUVEL_OPTIN_MARQUE,

-- >> App <<--    
    CASE WHEN APP.DATE_PREM_VISITE_APP <= T1.DATE_DEBUT_SEMAINE THEN 1 ELSE 0 END                                                                    AS FLG_PORTEUR_APP,
    CASE WHEN APP.DATE_PREM_VISITE_APP <= T1.DATE_DEBUT_SEMAINE AND APP.DATE_PREM_VISITE_APP > DATE_DEBUT_SEMAINE_PRECEDENTE THEN 1 ELSE 0 END            AS FLG_NOUVEAU_PORTEUR_APP,
   
    CASE WHEN APP.NBRE_VISITES_PAR_JOUR_GLOBAL IS NULL THEN 0
         WHEN APP.NBRE_VISITES_PAR_JOUR_GLOBAL > 0 THEN 1
         ELSE 0 END                                                                                                                             AS FLG_UTILISATEUR_ACTIF_GLOBAL,
   
    CASE WHEN APP.NBRE_VISITES_PAR_JOUR_SITE_MOBILE IS NULL THEN 0
         WHEN APP.NBRE_VISITES_PAR_JOUR_SITE_MOBILE > 0 THEN 1
         ELSE 0 END                                                                                                                             AS FLG_UTILISATEUR_ACTIF_SITE_MOBILE,
    
    CASE WHEN APP.NBRE_VISITES_PAR_JOUR_APP IS NULL THEN 0
         WHEN APP.NBRE_VISITES_PAR_JOUR_APP > 0 THEN 1
         ELSE 0 END                                                                                                                             AS FLG_UTILISATEUR_ACTIF_APP,
   
    CASE WHEN APP.NBRE_VISITES_PAR_JOUR_DESKTOP IS NULL THEN 0
         WHEN APP.NBRE_VISITES_PAR_JOUR_DESKTOP > 0 THEN 1
         ELSE 0 END                                                                                                                             AS FLG_UTILISATEUR_ACTIF_DESKTOP,
    
    CASE WHEN T1.FLG_ABONNE = 1 THEN 'Abonné' ELSE 'Hors abonné' END                                                                            AS SEG_ABONNE,
    
    CASE WHEN T1.FLG_ABONNE = 1 AND T1.TYPE_ABO_SIMPLIFIE = 'INT' THEN 'Abonné intégral'
         WHEN T1.FLG_ABONNE = 1 AND T1.TYPE_ABO_SIMPLIFIE = 'NUM' AND T1.COMPTE_CODE_CLIENT IS NOT NULL THEN 'Abonné numérique ABOWEB'
         --WHEN T1.FLG_ABONNE = 1 AND T1.TYPE_ABO_SIMPLIFIE IS NULL AND T1.COMPTE_CODE_CLIENT IS NOT NULL THEN 'Abonné ?'
         WHEN T1.FLG_ABONNE = 1 THEN 'Abonné numérique autre'
         WHEN T1.FLG_ABONNE = 0 THEN 'Non abonné'
         ELSE 'Anonyme' END                                                                                                                     AS SOUS_SEG_ABONNE,
    
    T1.TYPE_ABO_SIMPLIFIE
    
FROM(
    SELECT 
    U.COMPTE_ID_UTILISATEUR,
    U.COMPTE_CODE_CLIENT,
    CAL.NO_PARUTION,
    CAL.DATE_PARUTION,
    CAL.DATE_PARUTION_PRECEDENTE,
    CAL.DATE_DEBUT_SEMAINE_PRECEDENTE,
    CAL.DATE_DEBUT_SEMAINE,
    CAL.DATE_FIN_SEMAINE,
    CAL.MOIS_ANNEE_PARUTION,
    U.COMPTE_DATE_ACTIVATION,
    U.COMPTE_DATE_CREATION,
    U.DATE_DEBUT_ABONNEMENT, 
    U.DATE_DEBUT_ABONNEMENT_FAMILLE,
    U.DATE_DEBUT_OPTIN_NL,
    U.DATE_DEBUT_OPTIN_MARQUE,
    U.TYPE_ABO_SIMPLIFIE,
    U.FLG_ACQUISITION_ABOWEB,
    U.NBR_COMPTES_INVITES_ABONNEMENT_FAMILLE,
    CASE WHEN AF.COMPTE_ID_UTILISATEUR_ENFANT IS NOT NULL THEN 1 ELSE 0 END         AS FLG_COMPTE_ENFANT_ABONNE_FAMILLE,
    AF.COMPTE_ID_UTILISATEUR AS COMPTE_ID_UTILISATEUR_PARENT,
    U.FLG_ABONNE,
    MAX(CASE WHEN DATE_DEBUT_OPTIN_MARQUE IS NOT NULL THEN 1 ELSE 0 END)            AS FLG_OPTIN_MARQUE,
    MAX(CASE WHEN NB_NL_OPTIN >= 1 THEN 1 ELSE 0 END)                               AS FLG_OPTIN_NL   
        
    FROM CTE_UTILISATEUR_360 U
    LEFT JOIN DATATABLES_PROD.PATRIMOINE_CLASSE1.V_CALENDRIER_PARUTIONS CAL ON U.NO_PARUTION = CAL.NO_PARUTION AND CAL.FLG_HORS_SERIE = 0
    LEFT JOIN DATATABLES_PROD.PATRIMOINE_CLASSE1.DT_UTILISATEUR_PARENT_ENFANTS AF ON AF.COMPTE_ID_UTILISATEUR_ENFANT = U.COMPTE_ID_UTILISATEUR
    --WHERE U.COMPTE_ID_UTILISATEUR = 5130632
    GROUP BY ALL
) T1
LEFT JOIN DATATABLES_PROD.PATRIMOINE_CLASSE2.DT_ACTIVITE_UTILISATEUR APP ON T1.COMPTE_ID_UTILISATEUR::STRING = APP.ID_UTILISATEUR::STRING AND T1.NO_PARUTION = APP.NO_PARUTION

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- >> EMBASEMENT FIN << --
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
